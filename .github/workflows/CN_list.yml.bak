name: Update CN List

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC

jobs:
  update_lists:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GG_TOKEN }} # Token for pushing changes

      - name: Create directories
        run: |
          mkdir -p output
          mkdir -p logs
          # Initialize/clear the log file for this run
          > logs/cn_failed_downloads.log

      - name: Download and process cn_urls.txt and its references (for logging, not for final list)
        id: process_cn_urls
        run: |
          # This step still runs to log any download failures from these sources,
          # but its output (file1_processed.txt) will NOT be used in cn_list.conf.
          MAIN_LIST_URL="https://raw.githubusercontent.com/siren202101/Global_Compilation/refs/heads/main/cn_urls.txt"
          MAIN_LIST_CONTENT_FILE="cn_urls_main_content.txt"
          RAW_CONTENT_PART1="raw_content_part1_temp.txt" # Temporary accumulator for this step
          touch "$RAW_CONTENT_PART1"

          echo "Processing main list file for logging: $MAIN_LIST_URL"
          if ! curl -fSsL "$MAIN_LIST_URL" -o "$MAIN_LIST_CONTENT_FILE"; then
            echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ") - Failed to download $MAIN_LIST_URL (source 1)" >> logs/cn_failed_downloads.log
          else
            grep -vE '^[a-zA-Z0-9_./-]+\.list$|^#' "$MAIN_LIST_CONTENT_FILE" >> "$RAW_CONTENT_PART1" 2>/dev/null || true
            grep -E '^[a-zA-Z0-9_./-]+\.list$' "$MAIN_LIST_CONTENT_FILE" > referenced_list_files.txt 2>/dev/null || true

            BASE_URL_FOR_SUB_LISTS="https://raw.githubusercontent.com/siren202101/Global_Compilation/main/"
            while IFS= read -r list_file_name || [ -n "$list_file_name" ]; do
              if [ -z "$list_file_name" ]; then continue; fi
              list_file_name=$(echo "$list_file_name" | tr -d '\r')
              SUB_LIST_URL="${BASE_URL_FOR_SUB_LISTS}${list_file_name}"
              echo "Downloading referenced list for logging: $SUB_LIST_URL"
              TEMP_SUB_LIST_CONTENT="temp_sub_list_content.txt"
              if curl -fSsL "$SUB_LIST_URL" -o "$TEMP_SUB_LIST_CONTENT"; then
                cat "$TEMP_SUB_LIST_CONTENT" >> "$RAW_CONTENT_PART1"
                rm -f "$TEMP_SUB_LIST_CONTENT"
              else
                echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ") - Failed to download referenced list $SUB_LIST_URL (source 1)" >> logs/cn_failed_downloads.log
              fi
            done < referenced_list_files.txt

            # Process for potential intermediate use or inspection, but not for final list
            grep -vE '^#|^DOMAIN-|^IP-' "$RAW_CONTENT_PART1" > file1_processed.txt
            echo "Source 1 (cn_urls.txt derived) processed into file1_processed.txt (will not be in final cn_list.conf)."
          fi
          rm -f "$MAIN_LIST_CONTENT_FILE" referenced_list_files.txt "$RAW_CONTENT_PART1"
          # Ensure file1_processed.txt exists, even if empty, to prevent errors if other steps expect it.
          if [ ! -f file1_processed.txt ]; then
            > file1_processed.txt
          fi

      - name: Download and process accelerated-domains.china.conf (sole source for final list)
        id: process_accelerated_domains
        run: |
          URL2="https://fastly.jsdelivr.net/gh/felixonmars/dnsmasq-china-list/accelerated-domains.china.conf"
          ACCELERATED_RAW_FILE="accelerated_raw.txt"
          echo "Downloading $URL2 (this will be the source for cn_list.conf)"
          if curl -fSsL "$URL2" -o "$ACCELERATED_RAW_FILE"; then
            echo "Processing $ACCELERATED_RAW_FILE"
            sed 's|server=/||g; s|/114\.114\.114\.114||g' "$ACCELERATED_RAW_FILE" > file2_processed.txt
            echo "Source 2 (accelerated-domains.china.conf) processed successfully into file2_processed.txt."
          else
            echo "Failed to download $URL2 (source 2)"
            echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ") - Failed to download $URL2 (source 2)" >> logs/cn_failed_downloads.log
          fi
          rm -f "$ACCELERATED_RAW_FILE"
          if [ ! -f file2_processed.txt ]; then
            echo "file2_processed.txt was not created. Creating empty file for safety."
            > file2_processed.txt
          fi

      - name: Prepare final list (from accelerated_domains only), filter comments, sort, and deduplicate
        run: |
          # As per requirements, data from cn_urls.txt sources (file1_processed.txt) is EXCLUDED.
          # The final list is based solely on data from accelerated-domains.china.conf (file2_processed.txt).
          
          echo "Filtering lines starting with '#' from file2_processed.txt (the sole source for the final list)."
          # Ensure file2_processed.txt is the input for grep. If it could be empty, grep might error.
          # However, the previous step ensures file2_processed.txt always exists.
          grep -vE '^#' file2_processed.txt > filtered_list_content.txt
          
          echo "Sorting, deduplicating, and removing empty/blank lines."
          sort -u filtered_list_content.txt | sed '/^[[:space:]]*$/d' > output/cn_list.conf
          
          echo "Final list output/cn_list.conf created."
          # Clean up. file1_processed.txt was generated by the first processing step but is not used in the final list.
          rm -f file1_processed.txt file2_processed.txt filtered_list_content.txt

      - name: Update download log status
        run: |
          if [ ! -s logs/cn_failed_downloads.log ]; then
            echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ") - No download failures recorded in this run." > logs/cn_failed_downloads.log
          fi

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add output/cn_list.conf
          git add logs/cn_failed_downloads.log
          
          if ! git diff --staged --quiet; then
            COMMIT_MSG="Update cn_list.conf (accelerated_domains only) and logs - $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            echo "Changes detected. Committing with message: $COMMIT_MSG"
            git commit -m "$COMMIT_MSG"
          else
            COMMIT_MSG="Scheduled list update check (no content changes) - $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            echo "No content changes detected. Creating an empty commit as per requirement with message: $COMMIT_MSG"
            git commit --allow-empty -m "$COMMIT_MSG"
          fi
          
          echo "Pushing changes to repository."
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GG_TOKEN }}
